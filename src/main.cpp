#include <QGuiApplication>
#include <QQmlApplicationEngine>
#include <QQmlContext>
#include <QObject>
#include <iostream>

// Define a custom C++ class for handling button click
class ButtonClickHandler : public QObject
{
    Q_OBJECT
public:
    explicit ButtonClickHandler(QObject *parent = nullptr) : QObject(parent) {}

public slots:
    void handleButtonClick() {
        // Specify the path to the C++ file to compile and execute
        const char* cppFilePath = "/Users/nadja/Desktop/la.cpp";

        // Specify the compiler command to compile the C++ file
        const char* compilerCommand = "g++ -o executable_name ";

        // Concatenate the compiler command with the C++ file path
        std::string compileCommandStr = compilerCommand + std::string(cppFilePath);

        // Execute the compiler command to compile the C++ file
        int compileResult = std::system(compileCommandStr.c_str());

        // Check if the compilation was successful
        if (compileResult == 0) {
            std::cout << "Compilation successful." << std::endl;

            // Specify the name of the executable file generated by the compilation
            const char* executableName = "./executable_name";

            // Execute the generated executable
            int executeResult = std::system(executableName);

            // Check if the execution was successful
            if (executeResult == 0) {
                std::cout << "Execution successful." << std::endl;
            } else {
                std::cerr << "Error executing the generated executable." << std::endl;
            }
        } else {
            std::cerr << "Error compiling the C++ file." << std::endl;
        }
    }
};

int main(int argc, char *argv[])
{


    QGuiApplication app(argc, argv);

    // Register ButtonClickHandler class to be used in QML
    ButtonClickHandler buttonClickHandler;
    QQmlApplicationEngine engine;
    engine.rootContext()->setContextProperty("ButtonClickHandler", &buttonClickHandler);

    const QUrl url(u"qrc:/qt/qml/Main/main.qml"_qs);
    QObject::connect(
        &engine,
        &QQmlApplicationEngine::objectCreated,
        &app,
        [url](QObject *obj, const QUrl &objUrl) {
            if (!obj && url == objUrl)
                QCoreApplication::exit(-1);
        },
        Qt::QueuedConnection);

    engine.addImportPath(QCoreApplication::applicationDirPath() + "/qml");
    engine.addImportPath(":/");

    engine.load(url);

    if (engine.rootObjects().isEmpty()) {
        return -1;
    }

    // Connect the button's clicked signal to the handleButtonClick slot
    QObject *rootObject = engine.rootObjects().first();
    if (rootObject) {
        QObject *button1 = rootObject->findChild<QObject*>("button1");
        if (button1) {
            QObject::connect(button1, SIGNAL(clicked()), &buttonClickHandler, SLOT(handleButtonClick()));
        }
    }

    return app.exec();
}

#include "main.moc"
